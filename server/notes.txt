When starting a backend end server from scratch:
- install prisma using the quick start guide
   - model the data on prisma then migrate the dev (npx prisma migrate dev)

- after then create a seed file where you can create the prisma dummy database

- then after you write your seed queries in your seed file, run your seed file through `npx ts-node prisma/seed.ts`

-then to double check `npx prisma studio` is the information is seeded from the query

What I learned so far:
-when I am creating a backend using prisma, do the quick start guide, then 
- create the REST endpoints in the server/app file then implement the prisma create, change, get, and delete functions using express js
- Used middleware zod for variables typescripting to prevent extensive if statements for typeof string
- also used the coffeeRouter to route the coffee and tied it back to server.ts
   - when creating the router, don't put the endpoint until it is being used in the server and in the router use the "/" and have the end point "/coffee", for example, in the server.ts
   -naming convention for router is name.router.ts
-next i would go to middleware video and write down error handling to prevent the server shutdown if there is an error

-i created db.setup in prisma folder to have an automatic file to access prisma for the AuthRouter and future folder structures

-i created an authRouter and auth.utils.ts file 
   -in the auth.utils file i used a function that uses saltRounds to create a crypt token for a passwordHash for the associated user
      -in the seed file i refactored the testUsernames to use that uses the encrypt function from auth.utils
   -in the authRouter file i used zod and zod middleware to take care of my requirements if there is no information which can be shown when using POST in postman
      - i used validateRequest middleware for the login enpoint and use the bcrypt compare function to the password that i used to login and the passwordHash associated with it

- i implemented a function that takes the user's username and then created a function `createTokenForUser()` to create a jwt token using the `jwt.sign()` method that takes on 2-3 params, first one for the information of the user, the second one for the SECRET PASSWORD/ PRIVATE KEY, the last one being options of the algorithm



- when creating a coffee you need to signin, and use the token from the auth router to be able to create a coffee in the coffee router to be used in the headers for authorization
-then create the get Data From AuthToken which gets the information from loggin in and checks if user is actually the user when creating the coffee 
- in the coffeeRouter I created JWT token that takes in the header for reqest and authroization when logged in for creating the Auth Middleware that recycles code from the above text for other routers to be used

-I created a type system in the server.ts file for the dotenv. I also downloaded dotenv to be able to access the .env files for secret JWT token I created and then reseeded the prisma schema
- I also made the authMiddleware to be accessible to other router and be used as a guide to whoever is authorized to have a patch change on their personal favorites


I Finally connected on the front end endpoint and connecting to the backend! 
What I learned: 
-make sure to launch the json server first and implement each endpoint one by one so to not overwhelm yourself with having to make changes
-use cors (cross origin resource sharing) in the backend express to make the localhost accesible to the front-end:
   - use `app.use(cors())` and call the cors function out

- you would connect the backend to the front end by establishing the server for the backend. In this case, it's server 4000 on the server.ts file. Then in the frontend, with the help of CORS, fetch it using the api in the front end and the standard fetch method